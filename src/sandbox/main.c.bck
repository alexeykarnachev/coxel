#include "../includes.h"


static size_t SCR_WIDTH = 1920;
static size_t SCR_HEIGHT = 1080;
static size_t SHADOW_WIDTH = 1024;
static size_t SHADOW_HEIGHT = 1024;
static float SHADOW_NEAR = 1.0;
static float SHADOW_FAR = 25.0;
static float SIDE_TRANSLATION_SENS = 10.0;
static float FORWARD_TRANSLATION_SENS = 1.0;
static float ROTATION_SENS = 1.0;

static float CURSOR_X;
static float CURSOR_Y;
static bool MMB_PRESSED;
static bool LMB_PRESSED;

static Camera CAMERA;
Mat4 CAM_VIEW_MAT;
Mat4 CAM_PROJ_MAT;

static void framebuffer_size_callback(GLFWwindow *window, int width, int height) {
    SCR_WIDTH = width;
    SCR_HEIGHT = height;
    CAMERA.aspect = (float)SCR_WIDTH / (float)SCR_HEIGHT;
    glViewport(0, 0, width, height);
}

static void cam_update() {
    CAM_VIEW_MAT = cam_get_view_mat(&CAMERA);
    CAM_PROJ_MAT = cam_get_perspective_projection_mat(&CAMERA);
}

static void cursor_position_callback(GLFWwindow* window, double x, double y) {
    float xd = (CURSOR_X - x) / SCR_WIDTH;
    float yd = (y - CURSOR_Y) / SCR_HEIGHT;
    CURSOR_X = x;
    CURSOR_Y = y;
    
    if (MMB_PRESSED) {
        cam_translate(&CAMERA, SIDE_TRANSLATION_SENS * xd, SIDE_TRANSLATION_SENS * yd, 0.0f);
        cam_update();
    } 

    if (LMB_PRESSED) {
        cam_rotate(&CAMERA, ROTATION_SENS * yd, -ROTATION_SENS * xd);
        cam_update();
    }
}

static void mouse_button_callback(GLFWwindow* window, int button, int action, int mods) {
    if (button == GLFW_MOUSE_BUTTON_MIDDLE) {
        MMB_PRESSED = action == GLFW_PRESS;
    } else if (button == GLFW_MOUSE_BUTTON_LEFT) {
        LMB_PRESSED = action == GLFW_PRESS;
    }
}

void scroll_callback(GLFWwindow* window, double x, double y) {
    cam_translate(&CAMERA, 0.0f, 0.0f, FORWARD_TRANSLATION_SENS * y);
    cam_update();
}

void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods) {
    if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS) {
        glfwSetWindowShouldClose(window, GL_TRUE);
    }
}

GLFWwindow* create_window() {
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    GLFWwindow *window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "Coxel", glfwGetPrimaryMonitor(), NULL);
    if (window == NULL) {
        printf("ERROR: failed to create GLFW window");
        glfwTerminate();
        exit(-1);
    }

    glfwMakeContextCurrent(window);
    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);
    glfwSetCursorPosCallback(window, cursor_position_callback);
    glfwSetMouseButtonCallback(window, mouse_button_callback);
    glfwSetScrollCallback(window, scroll_callback);
    glfwSetKeyCallback(window, key_callback);

    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) {
        printf("ERROR: failed to initialize GLAD");
        exit(-1);
    }

    return window;
}

int main(void) {
    cam_create(&CAMERA);
    cam_update();
    GLFWwindow *window = create_window();

    Program sphere_program;
    Program shadow_program;
    const char* deps_file_paths[] = {"./shaders/common/random.glsl"};

    program_create(
        &shadow_program,
        "./shaders/space/model.vert",
        "./shaders/tessellation/simple_3_verts.tesc",
        "./shaders/tessellation/perlin_triangles.tese",
        "./shaders/shadows/point_shadows.geom",
        "./shaders/shadows/frag_depth.frag",
        1, deps_file_paths
    );

    program_create(
        &sphere_program,
        "./shaders/space/model.vert",
        "./shaders/tessellation/simple_3_verts.tesc",
        "./shaders/tessellation/perlin_triangles.tese",
        NULL,
        "./shaders/lighting/blinn_phong.frag",
        1, deps_file_paths
    );

    Vec3 light_pos = {{ 0.0, 4.0, 0.0 }};
    Mat4 shadow_proj = get_perspective_projection_mat(90.0, SHADOW_NEAR, SHADOW_FAR, SHADOW_WIDTH / SHADOW_HEIGHT);
    Mat4 shadow_transform_mats[6];
    Mat4 light_view_mat0 = get_view_mat(&vec3_pos_x, &vec3_neg_y, &light_pos);
    Mat4 light_view_mat1 = get_view_mat(&vec3_neg_x, &vec3_neg_y, &light_pos);
    Mat4 light_view_mat2 = get_view_mat(&vec3_pos_y, &vec3_pos_z, &light_pos);
    Mat4 light_view_mat3 = get_view_mat(&vec3_neg_y, &vec3_neg_z, &light_pos);
    Mat4 light_view_mat4 = get_view_mat(&vec3_pos_z, &vec3_neg_y, &light_pos);
    Mat4 light_view_mat5 = get_view_mat(&vec3_neg_z, &vec3_neg_y, &light_pos);
    shadow_transform_mats[0] = mat4_mat4_mul(&shadow_proj, &light_view_mat0);
    shadow_transform_mats[1] = mat4_mat4_mul(&shadow_proj, &light_view_mat1);
    shadow_transform_mats[2] = mat4_mat4_mul(&shadow_proj, &light_view_mat2);
    shadow_transform_mats[3] = mat4_mat4_mul(&shadow_proj, &light_view_mat3);
    shadow_transform_mats[4] = mat4_mat4_mul(&shadow_proj, &light_view_mat4);
    shadow_transform_mats[5] = mat4_mat4_mul(&shadow_proj, &light_view_mat5);

    float shadow_transforms[96];
    mat4_pack(shadow_transforms, shadow_transform_mats, 6);

    Vec3 sphere_scale = {{ 1.0, 1.0, 1.0 }};
    Vec3 sphere_rotation = {{ 0.0, 0.0, 0.0 }};
    Vec3 sphere_translation = {{ 0.0, 0.0, -10.0 }};
    Mat4 sphere_model_mat = get_model_mat(&sphere_scale, &sphere_rotation, &sphere_translation);
    cam_update();

    Model sphere_model;
    model_create(&sphere_model, ICOSAHEDRON_FACES, sizeof(ICOSAHEDRON_FACES), ICOSAHEDRON_VERTS, sizeof(ICOSAHEDRON_VERTS));

    PointShadows point_shadows;
    point_shadows_create(&point_shadows, SHADOW_WIDTH, SHADOW_HEIGHT);

    // exit(-1);
    // glfwTerminate();

    // glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
    // glLineWidth(3.0);
    glEnable(GL_CULL_FACE);
    glEnable(GL_DEPTH_TEST);
    glCullFace(GL_BACK);
    glPatchParameteri(GL_PATCH_VERTICES, 3);

    while (!glfwWindowShouldClose(window)) {
        glClearColor(0.5, 0.0, 0.0, 1.0);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        point_shadows_bind(&point_shadows);
        glUseProgram(shadow_program.gl_program);
        program_set_uniform_matrix_4fv(&shadow_program, "u_shadow_transforms", shadow_transforms, 6, GL_TRUE);
        program_set_uniform_3fv(&shadow_program, "u_light_pos", light_pos.data, 1);
        program_set_uniform_1f(&shadow_program, "u_far", SHADOW_FAR);
        model_draw_patches(&sphere_model, 3);

        glBindFramebuffer(GL_FRAMEBUFFER, 0);
        glViewport(0, 0, SCR_WIDTH, SCR_HEIGHT);

        glUseProgram(sphere_program.gl_program);
        program_set_attribute(&sphere_program, "a_pos", 3, GL_FLOAT);
        program_set_uniform_matrix_4fv(&sphere_program, "u_model", sphere_model_mat.data, 1, GL_TRUE);
        program_set_uniform_matrix_4fv(&sphere_program, "u_view", CAM_VIEW_MAT.data, 1, GL_TRUE);
        program_set_uniform_matrix_4fv(&sphere_program, "u_proj", CAM_PROJ_MAT.data, 1, GL_TRUE);
        program_set_uniform_3fv(&sphere_program, "u_center", sphere_translation.data, 1);
        program_set_uniform_1i(&sphere_program, "u_is_sphere", 1);
        program_set_uniform_3fv(&sphere_program, "u_light_pos", light_pos.data, 1);
        program_set_uniform_3fv(&sphere_program, "u_view_pos", CAMERA.translation.data, 1);
        program_set_uniform_1i(&sphere_program, "u_with_shadows", 1);
        program_set_uniform_1f(&sphere_program, "u_far", CAMERA.far);

        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_CUBE_MAP, point_shadows.depth_cubemap);

        model_draw_patches(&sphere_model, 3);

        glfwSwapBuffers(window);
        glfwPollEvents();
    }
    glfwTerminate();
}

